buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.8.2'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'maven'
}

group 'me.sunny'
version '0.22.1-SNAPSHOT'

sourceCompatibility = 1.8


repositories {
    mavenLocal()
    mavenCentral()
}


dependencies {
    compile 'org.apache.commons:commons-lang3:3.8.1'
    compile 'org.apache.commons:commons-io:1.3.2'
    compile 'org.apache.commons:commons-collections4:4.1'

    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.slf4j:slf4j-log4j12:1.7.25'

    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    compile 'org.yaml:snakeyaml:1.25'
    compile 'com.github.docker-java:docker-java:3.1.5'
    
    compileOnly 'org.projectlombok:lombok:1.18.2'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.2'
}

println 'JRE_HOME=' + System.properties['java.home']

apply plugin: 'javafx-gradle-plugin'

jfx {
    verbose = true
    mainClass = "me.sunny.generator.docker.Main"
    jfxAppOutputDir = "build/jfx/app"
    jfxMainAppJarName = "docker-manager-gui.jar"
    deployDir = "src/main/deploy"
    useEnvironmentRelativeExecutables = true
    libFolderName = "lib"

    // gradle jfxJar
    css2bin = false
    preLoader = null // String
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true
    copyAdditionalAppResourcesToJar = false
    skipCopyingDependencies = false
    useLibFolderContentForManifestClasspath = false
    fixedManifestClasspath = null

    // gradle jfxNative
    identifier = null  // String - setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "Alexander Kozlov\nGroup: Development"  // ÐºÐ¾ÑÑ‚Ñ‹Ð»ÑŒ Ñ‡Ñ‚Ð¾Ð±Ñ‹ Ñ…Ð¾Ñ€Ð¾ÑˆÐ¾ rpm Ð¿Ð°ÐºÐµÑ‚ ÑÐ¾Ð±Ñ€Ð°Ð»ÑÑ ))))
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    jvmProperties = null // Map<String, String>
    jvmArgs = null // List<String>
    userJvmArgs = null // Map<String, String>
    launcherArguments = null // List<String>
    nativeReleaseVersion = version
    needShortcut = false
    needMenu = false
    bundleArguments = [
            runtime: null
    ]
    appName = "DockerManagerGUI" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/package/windows/project.ico"
    additionalBundlerResources = null // path to some additional resources for the bundlers when creating application-bundle
    additionalAppResources = null // path to some additional resources when creating application-bundle
//    secondaryLaunchers = [[appName:"somethingDifferent"], [appName:"somethingDifferent2"]]
    fileAssociations = null // List<Map<String, Object>>
    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing
    customBundlers = null // List<String>
    failOnError = false
    onlyCustomBundlers = false
    skipJNLP = false
    skipNativeVersionNumberSanitizing = false // anything than numbers or dots are removed
    additionalJarsignerParameters = null // List<String>
    skipMainClassScanning = false // set to true might increase build-speed

    skipNativeLauncherWorkaround124 = false
    skipNativeLauncherWorkaround167 = false
    skipNativeLauncherWorkaround205 = false
    skipJNLPRessourcePathWorkaround182 = false
    skipSigningJarFilesJNLP185 = false
    skipSizeRecalculationForJNLP185 = false
    skipMacBundlerWorkaround = false

    // gradle jfxRun
    runJavaParameter = null // Stringclean
    runAppParameter = null // String

    // per default the outcome of the gradle "jarTask" will be used, set this to specify otherwise (like proguard-output)
    alternativePathToJarFile = null // String

    // to disable patching of ant-javafx.jar, set this to false
    usePatchedJFXAntLib = true

    // making it able to support absolute paths, defaults to "false" for maintaining old behaviour
    checkForAbsolutePaths = false

    // gradle jfxGenerateKeyStore
    keyStore = "src/main/deploy/keystore.jks"
    keyStoreAlias = "myalias"
    keyStorePassword = "password"
    keyPassword = null // will default to keyStorePassword
    keyStoreType = "jks"
    overwriteKeyStore = false

    certDomain = null // required
    certOrgUnit = null // defaults to "none"
    certOrg = null // required
    certState = null // required
    certCountry = null // required
}
